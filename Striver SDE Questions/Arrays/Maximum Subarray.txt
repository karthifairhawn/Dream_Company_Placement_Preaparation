53. Maximum Subarray

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104


Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


O(N^2) ( Not Accepted Leetcode )

class Solution {
    public int maxSubArray(int[] nums) {
        
        if(nums.length==1) return nums[0];
        
        int n = nums.length;
        int max = Integer.MIN_VALUE;    
        
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                max = Math.max(max,sum);
            }
        }
        return max;
        
    }
}


Kadane's Algo
class Solution {
    public int maxSubArray(int[] nums) {
        
        if(nums.length==1) return nums[0];
        
        int n = nums.length;
        int max = Integer.MIN_VALUE;    
        int sum=0;
        
        for(int i=0;i<n;i++){
            
            sum+=nums[i];
            max = Math.max(max,sum);
            
            if(sum<0) sum=0;
        }
        return max;
        
    }
}




