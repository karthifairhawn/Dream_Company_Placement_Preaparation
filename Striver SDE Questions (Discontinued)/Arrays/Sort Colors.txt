75. Sort Colors

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 
Follow up: Could you come up with a one-pass algorithm using only constant extra space?

// 2 Pass
class Solution {
    public void sortColors(int[] nums) {
        
        int z=0,o=0,t=0;
        
        for(int i:nums){
            if(i==0) z++;
            else if(i==1) o++;
            else t++;
        }
        
        for(int i=0;i<nums.length;i++){
            if(z-->0) nums[i]=0;
            else if(o-->0) nums[i]=1;
            else nums[i]=2;
        } 
        
    }
}

// 1 Pass


class Solution {
    public void sortColors(int[] nums) {
        
        int low=0,mid=0,high=nums.length-1;
        

        for(int i=0;i<nums.length;i++){
            if(nums[mid]==0){                
                nums[mid] = nums[low];
                nums[low] = 0;
                low++;
                mid++;                                                    
            }else if(nums[mid]==2){
                nums[mid]=nums[high];
                nums[high]=2;
                high--;
            }else{
                mid++;
            }
        }
        
    }
}


 